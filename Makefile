# Define the compiler and compiler flags
CXX = g++
OPT_CXXFLAGS = -O0 -g # TODO: Change to -O3 for release
CXXFLAGS = -std=c++14 -Wall -Wextra -pedantic $(OPT_CXXFLAGS)

# Define the source files and header files
SRC_ENCODER = rds_encoder.cpp
SRC_DECODER = rds_decoder.cpp
HEADERS = rds_encoder.hpp rds_decoder.hpp shared.hpp

# Define the output binaries
BIN_ENCODER = rds_encoder
BIN_DECODER = rds_decoder

XLOGIN = xlapes02

# Default target
all: $(BIN_ENCODER) $(BIN_DECODER)

# Build encoder
$(BIN_ENCODER): $(SRC_ENCODER) $(HEADERS)
	$(CXX) $(CXXFLAGS) -o $(BIN_ENCODER) $(SRC_ENCODER)

# Build decoder
$(BIN_DECODER): $(SRC_DECODER) $(HEADERS)
	$(CXX) $(CXXFLAGS) -o $(BIN_DECODER) $(SRC_DECODER)

# Clean the build
clean:
	rm -f $(BIN_ENCODER) $(BIN_DECODER)

clean-all:
	rm -f $(BIN_ENCODER) $(BIN_DECODER)
	rm -f $(XLOGIN).pdf $(XLOGIN).zip

valgrind-encoder: $(BIN_ENCODER)
	valgrind --leak-check=yes ./$(BIN_ENCODER) -g 0A -pi 4660 -pty 5 -tp 1 -ms 0 -ta 1 -af 104.5,98.0 -ps "RadioXYZ"

valgrind-decoder: $(BIN_DECODER)
	valgrind --leak-check=yes ./$(BIN_DECODER)

run-encoder-0a: $(BIN_ENCODER)
	./$(BIN_ENCODER) -g 0A -pi 4660 -pty 5 -tp 1 -ms 0 -ta 1 -af 104.5,98.0 -ps "RadioXYZ"

run-encoder-2a: $(BIN_ENCODER)
	./$(BIN_ENCODER) -g 2A -pi 4660 -pty 5 -tp 1 -rt "Now Playing: Song Title by Artist" -ab 0

run-decoder-0a: $(BIN_DECODER)
	./$(BIN_DECODER) -b 00010010001101000001101010000001001011000011111111101010101001101001000001101101010010011000011010101001000100100011010000011010100000010010110001100100011100000000000000000101101000011001000110100111110001100001001000110100000110101000000100101100100010001100000000000000000001011010000110111101011000010011101000010010001101000001101010000001001011001101001101010000000000000000010110100001011001010110100000100100

run-decoder-2a: $(BIN_DECODER)
	./$(BIN_DECODER) -b

build:
	docker compose build

run-docker:
	docker compose run --remove-orphans --entrypoint /usr/bin/fish app

down-docker:
	docker compose down

pack:
	pandoc $(XLOGIN).md  -o $(XLOGIN).pdf
	zip -r $(XLOGIN).zip Makefile *.cpp *.hpp $(XLOGIN).pdf
	./check_zip.sh $(XLOGIN).zip

# Phony targets
.PHONY: all clean valgrind-encoder valgrind-decoder run-docker down-docker
